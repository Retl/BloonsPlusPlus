#START SECTION: Leveling Info
$LEVELCAP = 50
$LevelTable = [0, 1000, 3000, 6000, 10000, 15000, 21000, 28000, 36000, 45000, 55000, 66000, 78000, 91000, 105000, 120000, 136000, 153000, 171000, 190000, 210000, 231000, 253000, 276000, 300000, 325000, 351000, 378000, 406000, 435000]
$LevelTableOld = [0, 1000, 3000, 6000, 10000, 15000, 21000, 28000, 36000, 45000, 55000, 66000, 78000, 91000, 105000, 120000, 136000, 153000, 171000, 190000, 210000, 231000, 253000, 276000, 300000, 325000, 351000, 378000, 406000, 435000]

$foegeneralnames = "Aideen, Airborne, Albino, All, Alpha, Ambrosia, And, Andromeda, Angel, Angels, Anne, Apache, Apple, Applejack, Appletart, Aqua, Aquarius, Arcaidia, Ardent, Aria, Aries, Armor, Arsenal, Art, Ashes, Ashred, Atom, Aurora, Autumn, Awesome, Azrael, Barb, Barkin', Baron, Barrel, Batmare, Beginnings, Bell, Belle, Best, Better, Big, Binge, Bitter, Black, Blackjack, Blackwing, Blitz, Blood, Bloom, Blueberry, Blueblood, Boing, Bomb, Bone, Bones, Boo, Borealis, Bosco, Bot, Bottlecap, Brass, Brawn, Breaks, Breeze, Bright, Brightlance, Brimstone, Britches, Broken, Bruise, Bullet, Bullion, Bunny, Butcher, Cactus, Cadence, Cager, Calamity, Calamity, Calculare, Caliber, Cancer, Candi, Candy, Cane, Caprice, Capricorn, Carlotta, Carrion, Carrots, Cassiopeia, Catalyst, Celestia, Cerberus, Chancer, Change, Changeling, Chaos, Characters, Charity, Charmer, Cheese, Cherry, Chowder, Chronicles, Cinder, Cinderblock, Cirrus, Clad, Clair, Clam, Clarinet, Clearer, Clover, Cogwheel, Coin, Cont, Contingency, Core, Cottage, Courier, Cover, Crack, Cracker, Craft, Crane, Creepy, Crimson, Cross, Crossed, Crosshair, Cruise, Crumpets, Crunchy, Cuffs, Curly, Cutter, Cyberdragon, Daddy, Daff, Daily, Dancer, Dare, Dark, Dash, Dawn, Day, Days, Dead, Deadeyes, Dealer, Death, Delvius, Desert, Destruction, Deus, Dewdrop, Diamond, Discord, Ditzy, Dj, Do, Doc, Doctor, Domino, Doo, Doodle, Doomtune, Doublethink, Dr, Drink, Dripping, Duck, Dusk, Dust, Dynamite, Eagle, Echo, Eclipse, Enclave, End, Endless, Equestria, Equestrian, Ethan, Ex, Eye, Eyes, Fallacy, Fallen, Fallout, Farsight, Father, Feather, Felix, Fern, Final, Fire, Flankorage, Flare, Fluffykins, Flurry, Fluster, Flutter, Fluttershy, Foehn, Foes, Forgotten, Forsaken, Fortune, Forty, Francium, Fraya, Fraying, Freshwater, Fries, Frisk, From, Frost, Frosty, Gaia, Gale, Garador, Gawd, Gawdyna, Gemini, Geri, Gestalt, Gibson, Gilda, Gin, Gingerbread, Gizmo, Glare, Glimmerlight, Glory, Glue, Gold, Goldenblood, Goldwreath, Goliath, Gorgon, Grand, Grandpa, Gray, Greaser, Great, Grey, Grim, Grimfeathers, Guardian, Guardian, Guise, Gun, Gunmetal, Gust, Hank, Harbinger, Hate, Haze, Helix, Hellhound, Helpinghoof, Henrietta, Heroes, Hidden, Hightide, Hired, Hive, Hokey, Holepunch, Holes, Homage, Home, Hoof, Hooves, Hope, Horizons, Horse, Horvahd, Hunting, Hurdles, Hyperion, Icicle, In, Inkwell, Iris, Iron, Ivory, Jack, Jackleg, Jane, Javahl, Jetstream, Jokeblue, Kaden, Kage, Kid, King, Knife, Krogoth, Lacunae, Laid, Lancer, Langson, Las, Last, Lavender, Leaf, Lemon, Lemonade, Leo, Libra, Life, Light, Lightning, Lil, Lilac, Lionheart, List, Littlepip, Littlepip, Locke, Lockout, Lonely, Lonesome, Longshot, Longwalk, Lost, Lucky, Luna, Lye, Lyra, Mach, Machina', Machine, Macintosh, Majina, Mane, Many, Maple, Mare, Mask, Mass, Massacre, Matters, May, Mayor, Memories, Memory, Merchants, Meridian, Mezzer, Midnight, Miranda, Misfits, Mist, Mister, Mix, Molten, Monterey, Moon, Moraas, Morality, Morning, Mosaic, Mosin, Mother, Motor, Mouse, Mr, Ms, Murky, Mustang, Myst, Nadyr, Naiara, Nails, Nanny, New, Nightmare, Nightseer, Nimbus, No, Noctilucent, Nothings, Nova, Number, Nurse, Ocher, Octavia, Off, Ol', Old, Operation, Or, Oracle, Ouroboros, Outlaw, Overhaul, Painkiller, Palette, Pandemonium, Past, Patch, Patient, Peace, Peaches, Peachy, Pegas, Pegasus, Philomena, Pie, Pink, Pinkie, Pisces, Plans, Platinum, Polymorph, Pon, Ponies, Pony, Poppyseed, Powerful, Preacher, Precious, Predator, Prevails, Pride, Priest, Prince, Princess, Project, Property, Prot, Psalm, Psychoshy, Puppysmiles, Purity, Pyrelight, Qarl, Quanta, Quick, Racket, Radar, Radiance, Radiant, Rage, Ragini, Raider, Railright, Rain, Rainbow, Rainy, Rampage, Rangers, Rarity, Raspberry, Rattle, Razorbeak, Razorwing, Reaper, Red, Redshift, Regina, Reign, Remains, Remedy, Requiem, Rig, Ripple, Riptide, Rise, Rising, Rivets, Road, Roads, Roadtrip, Roam, Robot, Rolling, Romeo, Rose, Rotting, Rover, Rumcake, Rummy, Runner, Runs, Rush, Sabre, Sagittarius, Saios, Sandy, Sanguine, Sapphire, Sat, Satin, Saw, Sawed, Schwarzwald, Scoodle, Scootaloo, Scope, Scorch, Scorpio, Scotch, Scramble, Scraps, Scratch, Seer, Sekashi, Sentinel, Serenity, Seven, Sevens, Sewn, Shade, Shades, Shadowhorn, Shadows, Shayle, Shimmercoat, Shining, Shores, Shot, Shower, Shrapnel, Sierra, Silas, Silent, Silk, Silver, Skies, Sky, Skydive, Skyfire, Skyline, Slaughter, Slot, Slug, Sly, Smasher, Smith, Snails, Snake, Snakebite, Snapshot, Snips, Snowflake, Solara, Solos, Sooty, Sorbet, Souffl, Souls, Sparkle, Spellfield, Spike, Spitfire, Spitfire, Spoon, Spring, Stablequest, Star, Starlight, Station, Steel, Steelhooves, Steeljack, Stern, Stock, Strawberry, Striker, Stronghoof, Stygius, Sugar, Summer, Sweeps, Sweet, Sweetie, Tacks, Tag, Tail, Tale, Tales, Tape, Tart, Tartarus, Taurus, Tempest, That, Thunder, Tiara, Tigerlily, Tinker, To, Tomorrow, Topaz, Torchwood, Tornado, Tourniquet, Trails, Treasure, Triage, Trigger, Trixie, Trolley, Trottenheimer, Truth, Turbulence, Turquoise, Twilight, Twist, Underdog, Underdogs, Undertow, Unlife, Usury, Vani, Velvet, Venatici, Vermilion, Versatile, Vesperius, Vinyl, Violet, Virgo, Viva, Voice, Vortex, Wanderer, Wanderings, War, Warclaw, Wave, We're, Whip, Whirling, Whiskey, Whooves, Wild, Wildcard, Wildfire, Windchill, Windfall, Winds, Windsheer, Wingright, Wings, Winter, Wintertrot, Wires, Wonder, Worker, Wraithwing, Xamuros, Xanthe, Xenith, Xephyr, Xiera, Zaita, Zasili, Zecora, Zodiac, Zyon"

$splitNames = $foegeneralnames.split(", "); #This will now be an array.

$pnv = 1 #Project Nevada Constant. Scales hunger/thirst/sleep rates.

$temp = 0
while $temp < $LEVELCAP do
	$LevelTable[$temp] = 25*(3 *($temp + 1) + 2) * ($temp)
	$temp+=1
end
#END SECTION: Leveling Info


class Utilities
	def self.RandomIntInRange(min, max)
		#This is an inclusive range. - Moore.
		range = (max - min).abs() + 1
		return (rand(range) + min).floor()
	end
	
	def self.RandomInArray(a)
		return Utilities.RandomIntInRange(0, a.length - 1)
	end
end

class Skill	
	#Constructor
	def initialize(theBase = 0, theName = "Nameless")
		@cap = 100 #Hard limit. If the sum of the skill exceeds this value, it will return this at most.
		@myName = theName
		@base = theBase #This is the core of a skill stat. Usually changes with level.
		#Properties
		@tag = 0  #Typically a +15 boost to a skill. Assigned at chargen to a max of three skills. A fourth can be set with a special perk.
		@rank = 0  #When a unit levels up, they may assign skillpoints into a skill's rank until the total for that skill reaches 100 (ignoring temporary boosts).
		@perk = 0  #Changed when a perk is added or removed to a unit that affects the amount of points in a skill.
		@item = 0  #Changed when items are equipped or unequipped that boost skills.
		@misc = 0  #Points from books or anything else that would affect a skill's points. Often temporary.
	end
	
	
	
	#Accessor Methods
	attr_accessor :myName
	
	def getTotal()
		return @base + @tag + @rank + @perk +  @item + @misc
	end
	
	#Mutator Methods
	def setBase(value)
		@base = value
	end
	
	def setTag(value)
		if (value == true || value == 15 || value == "15") #If we wanted to reuse this for some other game, we might not want this hard-coded. Leaving it here to prevent problems for this implementation. - Moore
			@base = 15
		elsif (value == false || value == 0 || value == "0")
			@base = 0
		else
			puts "Attempted to set a value that was neither true, false, 15, or 0 for a skill's tag."
		end
		@base = value
	end
	
	def addRank(value)
		done = false
		if (@rank + value <= getCap())
			done = true
			@rank += value
		end
		return done
	end
	
	def theCap() 
		return @cap
	end
	
	def getCap()
		return theCap()
	end
	
	def isMaxed()
		result = false
		if (@rank + @base >= getCap())
			result = true
		end
		return result
	end
end

class Unit
	#Properties
	
	#Stats used for identification, growth, breeding, etc.
	def initialize
		#@myName = Namer.makeName(2, mlpfimNames, foevanillanames, foegeneralnames, foepinkeyesnames)
		#@myName = "Nameless Noname"
		@myName = $splitNames[Utilities.RandomInArray($splitNames)] + " " + $splitNames[Utilities.RandomInArray($splitNames)]
		@temp = ["Male", "Female", "Yes"]
		@sex = @temp[Utilities.RandomIntInRange(0, @temp.length - 1)]
		@age = Utilities.RandomIntInRange(10, 30) #Days, not years. Might want to have a separate display for years, though. | Actually, consider generating a DoB instead, and dynamically figure out the age based on the gameTime.
		#Actually, if it's like the real world, then you should see most being between like 12 and 24 or so. 
		#Since you'd also see a lot of child deaths, where if you made it to 5 years old or so you'd end up living to 30-ish most of the time.
		#- Ilushia
	
		@kind = "Pony"
		@karma
	
		#The most base representation of character growth.
		@level = 1
		@xp = 0
		@skillpoints = 0
	
		#SPECIAL. Most other stats are derived from this.
		#[0 base, 1 tag, 2 ranks, 3 perks, 4 books, 5 items, 6 misc]
		@strength
		@perception
		@endurance
		@charisma
		@intelligence
		@agility
		@luck
	
		#General applied skill stats.
		@barter = Skill.new(0, "Barter")
		@battleSaddles = Skill.new(0, "Battle Saddles")
		@explosives = Skill.new(0, "Explosives")
		@lockpick = Skill.new(0, "Lockpick")
		@mew = Skill.new(0, "MEW")
		@medicine = Skill.new(0, "Medicine")
		@melee = Skill.new(0, "Melee")
		@mechanics = Skill.new(0, "Mechanics")
		@science = Skill.new(0, "Science")
		@firearms = Skill.new(0, "Firearms")
		@sneak = Skill.new(0, "Sneak")
		@speech = Skill.new(0, "Speech")
		@survival = Skill.new(0, "Survival")
		@unarmed = Skill.new(0, "Unarmed")
	
		@skillList = [@barter, @battleSaddles, @explosives, @lockpick, @mew, @medicine, @melee, 
							@mechanics, @science, @firearms, @sneak, @speech, @survival, @unarmed]
	
		#These stats depend less on character growth, and more on scenario.
		@currentWeight
		@maxWeight
	
		@water = 1000
		@food = 1000
		@sleep = 1000
	
		@waterRate = 12 * $pnv
		@foodRate = 4.75 * $pnv
		@sleepRate = 2.4 * $pnv
	
		@caps
	
		#Stats only used during combat
		@maxhp
		@hp
		@maxap
		@ap
	
		#This stat is limited by all the other stats, but not set by them.
		@traits
		@perks
		@tags
	
	end
	
	attr_accessor :myName
	
	#Methods.
	def setSpecial(s,p,e,c,i,a,l)
		@strength = s
		@perception = p
		@endurance = e
		@charisma = c
		@intelligence = i
		@agility = a
		@luck = l
	end
	
	def setRandomSpecial(s,p,e,c,i,a,l)
		spcl = [s,p,e,c,i,a,l]
		totalSpecial= s + p + e + c + i + a + l
		which = 0
		amount = 0
		while (totalSpecial != 40) do
				which = Utilities.RandomInArray(spcl)
				if totalSpecial > 40
					amount = -1
				else
					amount = Utilities.RandomIntInRange(0, 1)
					if (amount == 0) 
						amount = -1
					end
				end
				
				
				
				if (amount < 0)
					if (spcl[which] > 3)
						spcl[which]-= 1
					end
				elsif (spcl[which] < 10)
					spcl[which]+= 1
				end
				
				totalSpecial = spcl[0] + spcl[1] + spcl[2] + spcl[3] + spcl[4] + spcl[5] + spcl[6]
			end
		
		@strength = spcl[0]
		@perception = spcl[1]
		@endurance = spcl[2]
		@charisma = spcl[3]
		@intelligence = spcl[4]
		@agility = spcl[5]
		@luck = spcl[6]
	end
	
	def setDerivedSkills()
		@barter.setBase((@charisma * 2) + (@luck / 2).floor)
		@battleSaddles.setBase((@endurance * 2) + (@luck / 2).floor)
		@explosives.setBase((@perception * 2) + (@luck / 2).floor)
		@lockpick.setBase((@perception * 2) + (@luck / 2).floor)
		@mew.setBase((@perception * 2) + (@luck / 2))
		@medicine.setBase((@intelligence * 2) + (@luck / 2).floor)
		@melee.setBase((@strength * 2) + (@luck / 2).floor)
		@mechanics.setBase((@intelligence * 2) + (@luck / 2).floor)
		@science.setBase((@strength * 2) + (@luck / 2).floor)
		@firearms.setBase((@agility * 2) + (@luck / 2).floor)
		@sneak.setBase((@agility * 2) + (@luck / 2).floor)
		@speech.setBase((@charisma * 2) + (@luck / 2).floor)
		@survival.setBase((@endurance * 2) + (@luck / 2).floor)
		@unarmed.setBase((@endurance * 2) + (@luck / 2).floor)
	end
	
	def setLevel(newLevel)
		if (newLevel < 1) 
			newLevel = 1
		end
		if (newLevel > $LevelTable.length) 
			newLevel = $LevelTable.length
		end
		@xp = $LevelTable[newLevel - 1]
		@level = newLevel
		
		#Update the base stats.
		setDerivedSkills()
	end
	
	def levelUp(times)	
		#Repeat the logic 'times' times.		
		while times > 0 do			
			#If we can level up, level up. If not, report it.
			if @level < $LevelTable.length
				@xp = $LevelTable[@level]
				@level += 1
				@skillpoints += 10 + (@intelligence / 2) #TODO: Make an accessor method that gets the value ignoring temporary boosts. - Moore.
				#puts "Footnote: Level Up! Level ( " + @level.to_s + " )\nNew Perk Added: "
			end
			
			if (@level >= $LevelTable.length)
				#The LevelTable doesn't support levels past this number. You could use a function to auto-calculate needed xp to next level, but for now we're going to hard-cap.
				#puts "Footnote: Maximum Level Reached."
				times = 0
			end
			
			times -= 1
		end
		
		#Update the base stats.
		setDerivedSkills()
	end
	
	def hourly()
		#Behaviour that should be done for every hour that passes. - Moore.
		@water -= @waterRate
		@food -= @foodRate
		@sleep -= @sleepRate
		
		if @water < 0
			@water = 0
		end
		
		if @food < 0
			@food = 0
		end
		
		if @sleep < 0
			@sleep = 0
		end
		
		if hasSkillPoints(1)
			autoApplySkillpoints(1)
		end
	end
	
	def hasSkillPoints(num)
		return @skillpoints >= num
	end
	
	def autoApplySkillpoints(numPoints) #This version is an all-or-nothing attempt to apply the points to one skill.
		if hasSkillPoints(numPoints)
			which = 0
			added = false
			
			which = Utilities.RandomInArray(@skillList)
			added = @skillList[which].addRank(numPoints)
			
			#Move to the next iteration and reset values. - Moore
			if (added)
				@skillpoints -= numPoints
			end			
		end
		return added
	end
	
	def to_s()
		result =""
		result += "Name: " + @myName + ", "
		result += "Age: " + @age.to_s + ", "
		result += "Sex: " + @sex + ", "
		result += "Kind: " + @kind + "\n"
		
		#result += "<br />"
		
		result += "Level: " + @level.to_s + "\n"
		result += "STR: " + @strength.to_s + ", "
		result += "PER: " + @perception.to_s + ", "
		result += "END: " + @endurance.to_s + ", "
		result += "CHA: " + @charisma.to_s + ", "
		result += "INT: " + @intelligence.to_s + ", "
		result += "AGL: " + @agility.to_s + ", "
		result += "LCK: " + @luck.to_s + "\n"
		
		#result += "<br />"
		
		
		@i = 0
		while @i < @skillList.length do
			
			result += @skillList[@i].myName + ": " + @skillList[@i].getTotal().to_s
			if @i < @skillList.length - 1 
				result += ", "
			end
			
			result += " "
			@i += 1
		end
		
		#result += "<br />"
		
		#result += "Skillpoints Remaining: " + @skillpoints.to_s + "\n"
		#result += "<br />"
		
		return result
	end
end


def chargen()
	test = Unit.new
	selectedUnit = test
	selectedUnit.setRandomSpecial(7,7,7,7,7,7,7)

	count = Utilities.RandomIntInRange(0, 50)
	selectedUnit.levelUp(count)
	while selectedUnit.hasSkillPoints(1) do
		selectedUnit.autoApplySkillpoints(1)
	end
	
	return selectedUnit.to_s
end
